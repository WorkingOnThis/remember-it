generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  deck          Deck[]
  DefaultDeck   DefaultDeck[]
  Schema        Schema[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model DefaultDeck {
  userId String @unique
  deckId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  deck   Deck   @relation(fields: [deckId], references: [id], onDelete: Cascade)
}

model Deck {
  id          String        @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  cards       Card[]
  DefaultDeck DefaultDeck[]
}

model Card {
  id        String      @id @default(cuid())
  deckId    String
  schemaId  String
  state     String
  deck      Deck        @relation(fields: [deckId], references: [id], onDelete: Cascade)
  schema    Schema      @relation(fields: [schemaId], references: [id])
  cardValue CardValue[]
}

model Schema {
  id     String  @id @default(cuid())
  name   String
  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  fields Field[]
  cards  Card[]
}

model Field {
  id           String      @id @default(cuid())
  name         String
  description  String?
  type         String
  component    String
  defaultValue String?
  validation   String?
  values       String?
  schemaId     String
  schema       Schema      @relation(fields: [schemaId], references: [id], onDelete: Cascade)
  FieldValue   CardValue[]
}

model CardValue {
  id      String @id @default(cuid())
  value   String
  fieldId String
  cardId  String
  field   Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  card    Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)
}
